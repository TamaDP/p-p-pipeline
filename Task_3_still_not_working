#!usr/bin/perl

use warnings;
use Getopt::Std;

if (ARGV < 3) {
	die "Not enough arguments"
} else {};

$z = ARGV[2]; # the ion charge specified by the command line

@header = ("Protein", "Peptide Number", "Sequence", "m/z", "z", "Missed Cleavages"); 

printf ("%-11s \t %-11s \t %-s \t %-8s \t %s \t %s \n", @header);
#The above two lines print the headers of each column for the table in corrct format

$file = $ARGV[0];

open(SEQFILE,$file) or die "Unable to open file $file\n";



while ( <SEQFILE> ) {
	chomp $_ ;
	if ( /^>/ ) {
		@first_column = substr((split(/\w/,$_)),1); 	  #This adds the header line in fasta file to the table for each peptide
		printf ("%-11s \t %-11s \t", @first_column);	  # and knocks off the >
	} elsif ( /^A-Z/ ) {
		$mz = &mz_converter($_);			  # This uses subroutine (below) to get m/z values
		@seqdata = ($_, $mz, $z);
		printf ("%-s \t %-8s \t %s \t %s \n",@seqdata);
	} else { die '$file in wrong format' 		  	  # Detects whether the file is in correct format
	} 
	printf ;	#Creates table
}

close SEQFILE or die "Unable to close file $file\n";

# The subroutine is not specifically required for this program but it makes the while loop
# much easier to read and follow

sub mz_converter {
	
	%s2m = (A =>  71.0371, C => 103.0092, D => 115.0269, E => 129.0426,
		   F => 147.0684, G =>  57.0215, H => 137.0589, I => 113.0841,
		   K => 128.0950, L => 113.0841, M => 131.0405, N => 114.0429,
		   P =>  97.0528, Q => 128.0586, R => 156.1011, S =>  87.0320,
		   T => 101.0477, V =>  99.0684, W => 186.0793, Y => 163.0633,
		   '\s' => 0.0, "*" => 0.0
       );
	%s2a = (A =>  71.08, C => 103.14, D => 115.09, E => 129.12,
		   F => 147.18, G =>  57.05, H => 137.14, I => 113.16,
		   K => 128.17, L => 113.16, M => 131.19, N => 114.10,
		   P =>  97.12, Q => 128.13, R => 156.19, S =>  87.08,
		   T => 101.10, V =>  99.13, W => 186.21, Y => 163.18,
		   '\s' => 0.0, "*" => 0.0
       );
	
	if (ARGV[1] == "a") {					   # This is for the user definition in the command line to which masses are used
		%ref = %s2m;
		$water = 18.0106
	} elsif (ARGV[1] == "m") {
		%ref = %s2a;
		$water = 18.0153
	} else{
		die "Argument for masses not recognised"
	}
		@residues = split(//,$_); 			   #splits sequence data into parts
		@residue_mass = map {%ref{$_}}@residues; 	   #uses hashes to find masses
		$residue_mass = join ("+", @residue_mass);
		return(($residue_mass + $water)/$z);
}

exit;
